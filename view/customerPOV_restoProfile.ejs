<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">

  <title>Restaurant Account</title>
  <script src="https://kit.fontawesome.com/e9d3d528d3.js" crossorigin="anonymous"></script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/css/customerPOV_restoProfile_style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>

<body>
  <!-- Sidebar -->
  <div class="sidebar">
    <div class="logo">
      <img src="/images/logo.png" alt="Bloemen Bites Logo">
    </div>
    <div class="navigation">
      <a href="/<%=loggedUserEmail %>/customer-home-feed">
        <i class="fa-solid fa-magnifying-glass" style="color: #003399;"></i>
        <p>Search</p>
      </a>
      <a onclick="window.location.href='/<%=loggedUserEmail %>/search_username';">
        <i class="fa-solid fa-star" style="color: #003399;"></i>
        <p>Reviewers</p>
      </a>
      <a onclick="window.location.href='/<%=loggedUserEmail %>/customerProfile';">
        <i class="fa-solid fa-user" style="color: #003399;"></i>
        <p>Profile</p>
      </a>
      <form id="logoutForm" action="/logout" method="POST" style="display: none;"></form>

    </div>
  </div>
  
  <!-- Main Content Area --> 
<div class="content">
  <div class="profile-section">
    <!-- Profile Photo and Button -->
    <div class="profile-photo-section">
      <img src="/profile-pics/<%= restaurant._id %>" alt="Restaurant Profile Picture">
      <h2 id="reviews">Reviews</h2>
     
    </div>  

    <!-- Profile Details -->
    <div class="profile-details">
        <h2 id="user-name"><%= restaurant.restoName %></h2>
        <p id="user-email"><%= restaurant.location %></p>
        <div class="tags">
          <% 
          let tagsArray = Array.isArray(restaurant.tags) ? restaurant.tags : restaurant.tags.split(",").map(tag => tag.trim());
          tagsArray.forEach(tag => { 
          %>
              <span class="tag"><%= tag %></span>
          <% }); %>
      </div>
      <div class="description">
        <p id="user-description" ><%= restaurant.description %></p>
    </div>
      <!-- Rating Section -->
    <div class="rating">
      <div id="rating-stars"></div> <!-- Stars will be dynamically inserted -->
      <span id="rating-number"></span> <!-- Rating number will be dynamically updated -->
    </div>
      <p >
        <span><%= restaurant.phone %></span> | 
        <span><%= restaurant._id %></span>
      </p>
    </div>
  </div>

  <!-- New Reviews Container -->
  <div id="reviews-container" class="reviews-container">
    <div id="reviews-list" class="reviews-list">
      <% if (reviews.length === 0) { %>
          <p>No reviews yet.</p>
      <% } else { %>
          <% reviews.forEach(review => { %>
              <div class="review-post">
           
                      <div class="review-post-details">
                      <img class="review-user-photo" src="<%= customerPfps[review.customerEmail] %>" alt="User Photo">
                      <div class="review-info">
                        <p class="review-user-name"><%= customerUsernames[review.customerEmail] %></p>
                        <p class="review-meta"><%= new Date(review.datePosted).toLocaleDateString() %> 
                              <% if (review.edited) { %>| Edited<% } %>
                          </p>
                          <div class="review-rating">
                              <% for (let i = 0; i < Math.floor(review.rating); i++) { %>
                                  <i class="fa-solid fa-star" style="color: #ffcd3c;"></i>
                              <% } %>
                              <% for (let i = Math.floor(review.rating); i < 5; i++) { %>
                                  <i class="fa-regular fa-star" style="color: #ccc;"></i>
                              <% } %>
                          </div>
                      </div>
                  </div>
                  <h1 class="review-title"><%= review.reviewTitle %></h1>
                  <p class="review-text"><%= review.reviewText %></p>
  
                  <!-- Media Section -->
                  <div class="media-container">
                    <% review.media.forEach(mediaItem => { %>
                        <% let mediaUrl = String(mediaItem); %> 
                        <% if (mediaUrl.endsWith('.mp4')) { %>
                            <video controls width="100px" height="100px">
                                <source src="<%= mediaUrl %>" type="video/mp4">
                            </video>
                        <% } else { %>
                            <img src="<%= mediaUrl %>" width="100px" height="100px" style="border-radius: 8px;">
                        <% } %>
                    <% }); %>
                </div>
              
              
                  <!-- Reply Section -->
                  <% if (repliesMap[review._id] && repliesMap[review._id].length > 0) { %>
                    <div class="reply-container">
                        <% repliesMap[review._id].forEach(reply => { %>
                            <div class="reply-post">
                                <div class="review-post-details">
                                    <div class="reply-header">
                                        <p class="review-user-name"><%= reply.restoName %></p>
                                        <p class="review-meta"><%= new Date(reply.datePosted).toLocaleDateString() %> 
                                            <% if (reply.isEdited) { %>| Edited<% } %>
                                        </p>
                                    </div>
                                </div>
                                <p class="review-text"><%= reply.replyText %></p>
                            </div>
                        <% }); %>
                    </div>

                   
                <% } %>
                <div>
                  <button class="like-btn" data-review-id="<%= review._id %>">
                    üëç Like (<span class="like-count"><%= review.like || 0 %></span>)
                  </button>
                
                  <button class="dislike-btn" data-review-id="<%= review._id %>">
                    üëé Dislike (<span class="dislike-count"><%= review.dislikes || 0 %></span>)
                  </button>
                </div>
              </div>
             
          <% }); %>
      <% } %>
      
  </div>

  <a href="/<%=loggedUserEmail %>/profile/<%= restaurant._id %>/write">
    <div class="floating-button">
      <i class="fa-solid fa-plus"></i>
    </div>

<script src="/js/restoProfile_script.js"></script>
<script>
  document.addEventListener("DOMContentLoaded", function() {
      displayRating(<%= restaurant.rating %>);
  });

    const restaurantId = "<%= restaurant._id %>"; 
    fetch(`/reviews/${encodeURIComponent(restaurantId)}`)
        .then(response => response.json())
        .then(reviews => console.log("Reviews:", reviews));

    document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".like-btn, .dislike-btn").forEach(button => {
        button.addEventListener("click", async (event) => {
            const isLike = event.target.classList.contains("like-btn"); // Check if it's a like
            const reviewId = event.target.getAttribute("data-review-id");

            try {
                const response = await fetch(`/review/${isLike ? "like" : "dislike"}/${reviewId}`, {
                method: "POST",
                 headers: { "Content-Type": "application/json" }
            });

                 const data = await response.json();

                  if (response.ok) { 
                     const reviewElement = event.target.closest(".review-post");
                     reviewElement.querySelector(".like-count").textContent = data.like;
                     reviewElement.querySelector(".dislike-count").textContent = data.dislikes;

                      updateButtonStates(reviewElement, data.userLiked, data.userDisliked);
                  } else {
                     alert(data.error); 
                   }
              } catch (error) {
                    console.error("Error:", error);
                     alert("Something went wrong. Please try again.");
                     
                }

        });
    });
});

// function to update buttons
function updateButtonStates(reviewElement, userLiked, userDisliked) {
    const likeButton = reviewElement.querySelector(".like-btn");
    const dislikeButton = reviewElement.querySelector(".dislike-btn");

    if (userLiked) {
        likeButton.style.backgroundColor = "#007bff";
        likeButton.style.color = "#fff";
    } else {
        likeButton.style.backgroundColor = "";
        likeButton.style.color = "#007bff";
    }

    if (userDisliked) {
        dislikeButton.style.backgroundColor = "#dc3545";
        dislikeButton.style.color = "#fff";
    } else {
        dislikeButton.style.backgroundColor = "";
        dislikeButton.style.color = "#dc3545";
    }
}


</script>

</body>
</html>
